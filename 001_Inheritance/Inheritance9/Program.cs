using System;

// Оператори is і as.

namespace Inheritance
{
    class ClassA { /* ... */ }

    class ClassB : ClassA { /* ... */ }

    class Program
    {
        static void Main()
        {
            ClassB b = new ClassB();
            ClassA a = null;

            // --------------------------------------------- is - -------------------------------------------
            // Оператор is - перевіряє сумісність об'єкта із заданим типом.
            // Якщо даний об'єкт може бути приведений до даного типу не створюючи виняток (Exception),
            // вираз is приймає значення true.

            // Наприклад, в наступному коді визначається, чи є об'єкт екземпляром типу A або типу, похідного від A:

            if (b is ClassA)
            {
                a = (ClassA)b;
            }
            else
            {
                a = null;
            }

            // --------------------------------------------- as-- -------------------------------------------
            // Оператор as використовується для виконання перетворень між сумісними reference типами.
            // Оператор as подібний до оператору is. Однак, якщо перетворення неможливо,
            // as повертає значення null, а не створює виняток (Exception).

            // У загальному вигляді логіка роботи оператора as схожа до механізму використання оператора is
            // (наприклад на 25 рядку), тільки в скороченому вигляді.

            a = b as ClassA;

            // Delay.
            Console.ReadKey();
        }
    }
}
